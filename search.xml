<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS篇——知识总结①</title>
      <link href="/CSS%E7%AF%87%E2%80%94%E2%80%94%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E2%91%A0/"/>
      <url>/CSS%E7%AF%87%E2%80%94%E2%80%94%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E2%91%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CSS盒模型？"><a href="#1-CSS盒模型？" class="headerlink" title="1.CSS盒模型？"></a>1.CSS盒模型？</h2><p>​        CSS盒模型，用来装页面上的元素区域，由四部分组成： <strong>content 、padding 、margin  、border</strong>  。</p><p>​        CSS盒模型包括IE盒模型以及标准和模型。两种盒模型的区别在于：在标准盒模型中，width和height仅包括<strong>content</strong>，而IE盒模型的width和content则包含了<strong>padding + margin + border</strong>。</p><p>​        CSS3中引入了box-sizing属性：</p><p>​                标准盒模型 box-sizing: content-box;</p><p>​                IE盒模型 box-sizing: border-box;</p><p>​        可通过上述属性来改变盒模型。</p><h2 id="2-CSS盒子选择器？"><a href="#2-CSS盒子选择器？" class="headerlink" title="2.CSS盒子选择器？"></a>2.CSS盒子选择器？</h2><ul><li><p><input checked="" disabled="" type="checkbox">  ​    id选择器(#id)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    类选择器(.className)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    标签选择器(div,h1,p)<br>​    属性选择器(a[rel=”external”])</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    后代选择器(h1 p)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    相邻后代选择器(子)选择器(ul&gt;li)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    伪类选择器(a:hover,li:nth-child)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    伪元素选择器(:before :after)<br>​    通配符选择器(*)</p><p>​    兄弟选择器(li~a)<br>​    相邻兄弟选择器(li+a)</p><p>​    其中标记的是常用选择器。</p><p>​    优先级如下：**!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性**。</p><p>​    有几点需要注意：①继承得来的属性优先级最低；②写CSS样式时，尽量少用层级关系，可用类选择器代替层级关系，使得浏览器可通过查找<em>更少的元素标签</em>来确定匹配的style元素，这样更加简洁高效。</p></li></ul><h2 id="3-CSS的伪类和伪元素？"><a href="#3-CSS的伪类和伪元素？" class="headerlink" title="3.CSS的伪类和伪元素？"></a>3.CSS的伪类和伪元素？</h2><p>​        在css3中单冒号表示伪类，双冒号表示伪元素。</p><p>​        伪类和伪元素都是用来修饰<em>不在</em>文档树种的部分，比如一句话种的第一句话或者列表的第一个元素。<br>伪类：用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而改变的。比如当用户悬停在指定的元素时，我们可以通过:hover来描述这个状态。<br>​        伪元素：创建一些不在文档树中的元素，并为其添加样式。他们允许我们为元素的某部分设置样式。比如，我们通过::before来用于在一个<em>元素前</em>增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这个文本实际不在文档书中。<br>​        但是有些浏览器单冒号也可以表示伪元素，由于旧版w3c规范未对其进行特别区分。</p><h2 id="4-CSS中有哪些属性可以继承？"><a href="#4-CSS中有哪些属性可以继承？" class="headerlink" title="4.CSS中有哪些属性可以继承？"></a>4.CSS中有哪些属性可以继承？</h2><p>​        每一个属性在定义中都会指定这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用父元素的同属性的值。<br>​        一般具有继承性的属性有，字体相关的属性: font-size 和 font-wight 。文本相关的，color 和 text-align 等（想象一下，如果color属性不能继承，那我们就得为每个元素来设置颜色属性了，这太麻烦了）。表格的一些布局属性、列表属性 list-style 等。还有光标属性 cursor 、元素可见性 visibility。<br>​        当一个属性不是可继承属性的时候，我们也可以通过设置为inherit来使它从父属性那获取同属性名的值来继承。</p><p>​        以上都是常见的规则，还有很多其他可继承和不可继承的属性，只是需要我们多去尝试而已。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*利用flex布局实际使用时应考虑兼容性*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;    <span class="comment">/*垂直居中*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;    <span class="comment">/*水平居中*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: bisque;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;    <span class="comment">/*方便看效果*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="C:\Users\Embrace\Desktop\CSS知识点\①居中4.JPG"></p><h2 id="7-display有哪些值？说明作用。"><a href="#7-display有哪些值？说明作用。" class="headerlink" title="7.display有哪些值？说明作用。"></a>7.display有哪些值？说明作用。</h2><p>​        block：块级元素，默认宽度为父元素宽度，可设置宽高，换行显示。<br>​        none：元素不显示，并从文档流中移除。<br>​        inline：行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。<br>​        inline-block：默认宽度为内容宽度，可以设置宽高，同行显示。<br>​        list-item：像块类型元素一样显示，并添加样式列表标记。<br>​        table：此元素作为块级表格来显示。<br>​        inherit：规定从父元素继承display的值。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数节流和防抖</title>
      <link href="/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/"/>
      <url>/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<p>什么是函数节流？</p><p>1.一个函数执行一次后，只有<strong>大于</strong>设定的执行周期后才会执行第二次；2.有个需要频繁触发函数，出于优化新能角度，在规定时间内，只让函数触发的<strong>第一次</strong>生效，后面的不生效。</p><p>什么又是函数防抖？</p><p>一个需要频繁触发的函数在我规定的某个事件内，只让<strong>最后一次</strong>生效。</p><p>节流函数有两个参数，fun(fn, delay)，其中，fn表示要<strong>被节流</strong>的函数，delay表示规定的时间。</p><p>代码示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span> (nowTime - timer &gt; delay) &#123;</span><br><span class="line">            fn.call(<span class="built_in">this</span>);</span><br><span class="line">            timer = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function throttle(fn, delay) &#123;</span></span><br><span class="line"><span class="comment">//     // 记录当前函数触发的事件</span></span><br><span class="line"><span class="comment">//     var lastTime = 0;</span></span><br><span class="line"><span class="comment">//     return function () &#123;</span></span><br><span class="line"><span class="comment">//         // var nowTime=Date.now();</span></span><br><span class="line"><span class="comment">//         var nowTime = Date.now();</span></span><br><span class="line"><span class="comment">//         if (nowTime - lastTime &gt; delay) &#123;</span></span><br><span class="line"><span class="comment">//             // 修正this 指向问题</span></span><br><span class="line"><span class="comment">//             fn.call(this);</span></span><br><span class="line"><span class="comment">//             lastTime = nowTime;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">document</span>.onscroll = throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;触发了&#x27;</span> + <span class="built_in">Date</span>.now()), <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// function debounce(fn, delay) &#123;</span></span><br><span class="line"><span class="comment">//     var timer = null;</span></span><br><span class="line"><span class="comment">//     // 清除上一次的延迟武器</span></span><br><span class="line"><span class="comment">//     return function () &#123;</span></span><br><span class="line"><span class="comment">//         // 清除上一个延时器</span></span><br><span class="line"><span class="comment">//         clearTimeout(timer);</span></span><br><span class="line"><span class="comment">//         // 重新设置新的延时器</span></span><br><span class="line"><span class="comment">//         timer = setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             fn.apply(this);</span></span><br><span class="line"><span class="comment">//         &#125;, delay)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>).onclick = debounce(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;点击事件触发了&#x27;</span> + <span class="built_in">Date</span>.now()), <span class="number">500</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>body标签内仅有一个button元素。</p><p>结果如下：</p><p><img src="C:\Users\Embrace\Desktop\防抖节流示例.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/My-First-Blog/"/>
      <url>/My-First-Blog/</url>
      
        <content type="html"><![CDATA[<p>本篇博客用来测试是否可以成功部署。</p><p>//现在多一条，重新部署却出了问题，再试试</p><h2 id="js数组去重"><a href="#js数组去重" class="headerlink" title="js数组去重"></a>js数组去重</h2><p>JavaScript数组去重有多种方法，这里简单列举三种。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">方法一：双重<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>],flag = [];</span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span> ;j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] == arr[i]) &#123;</span><br><span class="line">            arr.splice(j,<span class="number">1</span>);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flag.push(temp);</span><br><span class="line">&#125;</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">number , index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数字&quot;</span> + number + <span class="string">&quot;出现了&quot;</span> + flag[index] + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">            </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法二：利用indexOf()和push()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noRepeat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line"><span class="keyword">if</span>(newArr.indexOf(arr[i]) == -<span class="number">1</span>)&#123;</span><br><span class="line">newArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(noRepeat(arr));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方法三：sort()先排序，再两两比较，若相等则splice();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noRepeat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> a-b; &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i+<span class="number">1</span>] == arr[i])&#123;</span><br><span class="line">            arr.splice(i+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(noRepeat(arr));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
