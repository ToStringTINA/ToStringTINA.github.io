<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js篇——知识总结②</title>
      <link href="/js-pian-zhi-shi-zong-jie/"/>
      <url>/js-pian-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-call-和-apply-的区别？"><a href="#1-call-和-apply-的区别？" class="headerlink" title="1.call() 和 apply() 的区别？"></a>1.call() 和 apply() 的区别？</h2><p>它们的作用一模一样，区别仅在于参数的形式不同。<br>apply()接收两个参数，第一个参数指定函数内this对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为伪数组，apply方法把这个集合中的元素作为参数转递给被调的函数。<br>call传入的参数数量不固定，跟apply相同的是，第一个对象也是代表函数的this指向，从第二个参数开始往后，每个参数都被依次传入函数。</p><h2 id="2-类数组的定义？"><a href="#2-类数组的定义？" class="headerlink" title="2.类数组的定义？"></a>2.类数组的定义？</h2><p>一个拥有length属性和若干索引属性的对象可以被称为类数组对象。类数组对象和数组类似，但是不能调用数组的方法。<br>常见的类数组有arguments和DOM方法的返回结果，还有一个函数可以被看做是类数组对象，因为它含有lenght属性值，代表可接受的参数个数<br>常见的类数组转换为数组的方法有这样几种？<br>1.通过call调用数组的slice方法来实现转换<br>Array.prototype.slice.call(arrayLike);<br>2.通过call调用数组的splice方法来实现转化<br>Array.prototype.splice.call(arrayLike,0);<br>3.通过apply调用数组里的concat方法来实现转化<br>Array.prototype.concat.apply([],arrayLike)<br>4.通过Array.from方法来实现转化<br>Array.from(arrayLike)。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js篇——知识总结①</title>
      <link href="/js-pian-zhi-shi-zong-jie/"/>
      <url>/js-pian-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-js的基本数据类型？"><a href="#1-js的基本数据类型？" class="headerlink" title="1.js的基本数据类型？"></a>1.js的基本数据类型？</h2><p>undefined，Null，Boolean，Number，String，还有Symbol类型，代表创建后独一无二不可变的数据类型，它的出现主要解决可能出现的全局变量冲突问题。</p><h2 id="2-js有几种数据类型的值？"><a href="#2-js有几种数据类型的值？" class="headerlink" title="2.js有几种数据类型的值？"></a>2.js有几种数据类型的值？</h2><p>JS中有两种类型的值，一种是基本数据类型，一种是引用数据类型。<br>基本数据类型：undefined，Null，Number，String，Symbol，Boolean。<br>引用数据类型：指的是Object类型，所有其他的如Array，Data等数据类型都可以理解为Object类型的子类。<br>两种类型间的主要存储位置不同，基本数据类型的值直接保存在**<code>栈内存</code><strong>中，而引用数据类型的值保存在</strong><code>堆内存</code>**中。通过使用栈中所对应的指针来获取堆中的值。</p><h2 id="3-堆和栈是什么？二者的区别和联系是？"><a href="#3-堆和栈是什么？二者的区别和联系是？" class="headerlink" title="3.堆和栈是什么？二者的区别和联系是？"></a>3.堆和栈是什么？二者的区别和联系是？</h2><p>堆(heap)和栈(stack)的概念存在于数据结构中和操作系统内存中。<br>在数据结构中，栈中数据数据是<em>先进后出</em>。而堆是一个优先队列，是按优先队列来进行排序的，优先级可以按照大小快规定。完全二叉树是堆的一种表现方式。<br>在操作系统中，内存被分为栈区和堆区。<br>栈内存：存放函数的参数值、局部变量的值等，其操作方式类似于数据结中的栈。每种数据占用的内存空间大小<strong>确定</strong>，由系统<strong>自动分配和自动释放</strong>，这样带来的好处是，内存可以及时得到回收，相对于堆来说，更容易管理内存空间。<br>堆内存一般由程序员分配释放，即内存<strong>动态分配</strong>，如果程序员不释放，程序结束时可能由垃圾回收机制回收(引用计数法和标记清除法).</p><h2 id="4-内部属性-class-是什么？"><a href="#4-内部属性-class-是什么？" class="headerlink" title="4.内部属性[[class]]是什么？"></a>4.内部属性[[class]]是什么？</h2><p>所有typeof返回为”<em><strong>Object</strong></em>“的对象(加数值)都包含一个内部属性<a href="%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%8A%8A%E5%AE%83%E5%BD%93%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%86%85%E9%83%A8%E7%9A%84%E5%88%86%E7%B1%BB,%E8%80%8C%E9%9D%9E%E4%BC%A0%E7%BB%9F%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%84%8F%E4%B9%89%E4%B8%8A%E7%9A%84%E7%B1%BB">[class]</a>。这个属性无法直接访问，一般通过<strong>Object.prototype.toString</strong>**(…)**来查看。例如：<br>Object.prototype.toString.call([1,2,3]);<br>//“[object Array]”<br>Object.prototype.toString.call(/regex-literal/i);<br>//“[object RegExp]”.</p><h2 id="5-js的内置对象？"><a href="#5-js的内置对象？" class="headerlink" title="5.js的内置对象？"></a>5.js的内置对象？</h2><p>js中的内置对象主要指的是在程序执行前，存在<strong>全局作用域</strong>的由js定义的一些全局值属性、函数和用来实体化其他对象的构造函数对象。一般我们经常用到的如全局变量值NaN,undefined，全局函数如parseInt() parseFloat() ，用来实体化对象的构造函数如Date,Object等，还有提供数学计算的单位内置对象如Math对象。</p><p>稍微总结一下：</p><p>Object是 JavaScript 中所有对象的父对象。</p><p>数据封装类对象：Object、Array、Boolean、Number 和 String 。</p><p>其他对象：Function、Math、Date、RegExp、Error。<br>特殊的基本包装类型(String、Number、Boolean)<br>arguments: 只存在于函数内部的一个类数组对象。</p><p>还有其他，不在此一一赘述。</p><h2 id="6-创建对象的方法？"><a href="#6-创建对象的方法？" class="headerlink" title="6.创建对象的方法？"></a>6.创建对象的方法？</h2><p>①通过字面量创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu = &#123;</span><br><span class="line"><span class="comment">//name与age属于静态体征</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Nicknmame&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line"><span class="comment">//study与eat属于动态行为</span></span><br><span class="line"><span class="attr">study</span>: <span class="function"><span class="keyword">function</span>(<span class="params">job</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;工作:&#x27;</span> + job)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">eat</span>: <span class="function"><span class="keyword">function</span>(<span class="params">gender</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;性别：&#x27;</span> + gender)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②通过构造函数创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的函数名首字母大写，区分与普通函数的区别，不是强制规定的，也可以小写。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.sex = sex,</span><br><span class="line"><span class="built_in">this</span>.job = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Person(<span class="string">&#x27;丽丽&#x27;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">Person.job();</span><br><span class="line"><span class="comment">//此代码一共会两次跳出对话框，因为创建对象时会自动执行构造函数一次。this指的是调用函数的对象。</span></span><br></pre></td></tr></table></figure><p>③通过new Object()创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&#x27;wuxiaodi&#x27;</span>;</span><br><span class="line">person.sex = <span class="string">&#x27;boy&#x27;</span>;</span><br></pre></td></tr></table></figure><p>④通过工厂方法创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">stu.name = name;</span><br><span class="line">stu.age = age;</span><br><span class="line">stu.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; 学习...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-null和Undefined的区别？"><a href="#7-null和Undefined的区别？" class="headerlink" title="7.null和Undefined的区别？"></a>7.null和Undefined的区别？</h2><p>JavaScript的最初版本是这样区分的：null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</p><p>①null表示”没有对象”，即该处不应该有值，可这样理解：变量需要保存对象，但是没有可以保存的对象。undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</p><p>②undefined代表的含义是未定义，null代表的含义是空对象。一般变量声明了还没有定义返回。undefined,null主要用于赋值给一些可能会返回对象的变量，作为初始值。</p><p>③当我们对两种类型使用typeof进行判断的时候，Null类型化会返回”object”，因为逻辑上讲，null值表示一个空对象指针，可进一步与undefined区分开来。这是一个历史遗留的问题。当我们使用双等号对两种的值进行比较会返回true（undefined值由null派生而来），使用三等号时会返回false。</p><p>即使未初始化的变量会被自动赋予undefined值，但仍然建议声明变量的同时初始化。这样，当 typeof 返回 “undefined” 时，我们就能知道那是因为给定的变量尚未声明，而不是声明了但未初始化，便于判断，避免操作失误。</p><h2 id="8-如何获取安全的undefined值？"><a href="#8-如何获取安全的undefined值？" class="headerlink" title="8.如何获取安全的undefined值？"></a>8.如何获取安全的undefined值？</h2><p>因为undefined是一个标识符，所以可以被当成变量来使用和赋值，但是这样会影响undefined的正常判断。<br>表达式void__没有返回值，因为返回的结构是undefined。void 并不改变表达式的结果，只是让表达式不返回值。</p><h2 id="9-简略列几条Javascript的基本规范。"><a href="#9-简略列几条Javascript的基本规范。" class="headerlink" title="9.简略列几条Javascript的基本规范。"></a>9.简略列几条Javascript的基本规范。</h2><p>①函数作用域中所有的变量声明应该尽量提到函数首部，用一个var声明，不允许出现两个联系的var声明，声明时如果变量没有值，应该给该对象类型的初始值，便于他人阅读代码时，能够一目了然的知道变量对于的类型值。<br>②代码中出现地址，时间等字符串时需要使用常量代替。<br>③在进行比较的时候，尽量使用’===’,’!==’代替’==’,’!=’。<br>④不要在内置对象的原型上添加方法，如Array，Date。<br>⑤switch语句必须带有default分支。<br>⑥for循环必须有大括号。<br>⑦if语句必须有大括号。</p><h2 id="10-关于this对象？"><a href="#10-关于this对象？" class="headerlink" title="10.关于this对象？"></a>10.关于this对象？</h2><p>this是执行上下文的一个属性，它指向最后依次调用这个方法的对象。在实际开发中，this的指向是可以通过四种模式来判断的。<br>①函数调用模式，直接作为函数调用的时候，this指向<em>全局变量</em>。<br>②方法调用模式，如果一个函数作为一个对象的方法进行调用，this指向<em>这个对象</em>。<br>③构造器调用模式，如果一个函数用new调用时，函数执行前会新建一个对象，this指向这个<em>新建对象。</em><br>④apply，call和bind调用模式，这三种方法都可以实显示的指定调用函数的this指向。<br>这四种方式，使用构造器调用模式的优先级最高，然后是apply，call，bind调用模式，然后是方法是调用模式，然后是函数调用模式。</p><p>在某些情况下，优势也会带来劣势。当要求动态上下文的时候，你就不能使用箭头函数，比如：定义方法，用构造器创建对象，处理时间时用 this 获取目标。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS篇——知识总结①</title>
      <link href="/css-pian-zhi-shi-zong-jie/"/>
      <url>/css-pian-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CSS盒模型？"><a href="#1-CSS盒模型？" class="headerlink" title="1.CSS盒模型？"></a>1.CSS盒模型？</h2><p>​        CSS盒模型，用来装页面上的元素区域，由四部分组成： <strong>content 、padding 、margin  、border</strong>  。</p><p>​        CSS盒模型包括IE盒模型以及标准和模型。两种盒模型的区别在于：在标准盒模型中，width和height仅包括<strong>content</strong>，而IE盒模型的width和content则包含了<strong>padding + margin + border</strong>。</p><p>​        CSS3中引入了box-sizing属性：</p><p>​                标准盒模型 box-sizing: content-box;</p><p>​                IE盒模型 box-sizing: border-box;</p><p>​        可通过上述属性来改变盒模型。</p><h2 id="2-CSS盒子选择器？"><a href="#2-CSS盒子选择器？" class="headerlink" title="2.CSS盒子选择器？"></a>2.CSS盒子选择器？</h2><ul><li><p><input checked="" disabled="" type="checkbox">  ​    id选择器(#id)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    类选择器(.className)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    标签选择器(div,h1,p)<br>​    属性选择器(a[rel=”external”])</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    后代选择器(h1 p)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    相邻后代选择器(子)选择器(ul&gt;li)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    伪类选择器(a:hover,li:nth-child)</p></li><li><p><input checked="" disabled="" type="checkbox">  ​    伪元素选择器(:before :after)<br>​    通配符选择器(*)</p><p>​    兄弟选择器(li~a)<br>​    相邻兄弟选择器(li+a)</p><p>​    其中标记的是常用选择器。</p><p>​    优先级如下：**!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性**。</p><p>​    有几点需要注意：①继承得来的属性优先级最低；②写CSS样式时，尽量少用层级关系，可用类选择器代替层级关系，使得浏览器可通过查找<em>更少的元素标签</em>来确定匹配的style元素，这样更加简洁高效。</p></li></ul><h2 id="3-CSS的伪类和伪元素？"><a href="#3-CSS的伪类和伪元素？" class="headerlink" title="3.CSS的伪类和伪元素？"></a>3.CSS的伪类和伪元素？</h2><p>​        在css3中单冒号表示伪类，双冒号表示伪元素。</p><p>​        伪类和伪元素都是用来修饰<em>不在</em>文档树种的部分，比如一句话种的第一句话或者列表的第一个元素。<br>伪类：用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而改变的。比如当用户悬停在指定的元素时，我们可以通过:hover来描述这个状态。<br>​        伪元素：创建一些不在文档树中的元素，并为其添加样式。他们允许我们为元素的某部分设置样式。比如，我们通过::before来用于在一个<em>元素前</em>增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这个文本实际不在文档书中。<br>​        但是有些浏览器单冒号也可以表示伪元素，由于旧版w3c规范未对其进行特别区分。</p><h2 id="4-CSS中有哪些属性可以继承？"><a href="#4-CSS中有哪些属性可以继承？" class="headerlink" title="4.CSS中有哪些属性可以继承？"></a>4.CSS中有哪些属性可以继承？</h2><p>​        每一个属性在定义中都会指定这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用父元素的同属性的值。<br>​        一般具有继承性的属性有，字体相关的属性: font-size 和 font-wight 。文本相关的，color 和 text-align 等（想象一下，如果color属性不能继承，那我们就得为每个元素来设置颜色属性了，这太麻烦了）。表格的一些布局属性、列表属性 list-style 等。还有光标属性 cursor 、元素可见性 visibility。<br>​        当一个属性不是可继承属性的时候，我们也可以通过设置为inherit来使它从父属性那获取同属性名的值来继承。</p><p>​        以上都是常见的规则，还有很多其他可继承和不可继承的属性，只是需要我们多去尝试而已。</p><h2 id="5-CSS优先级算法如何计算？"><a href="#5-CSS优先级算法如何计算？" class="headerlink" title="5.CSS优先级算法如何计算？"></a>5.CSS优先级算法如何计算？</h2><p>​        首先判断一条属性声明是否有权重。也就是 是否在声明后面又!important。一条声明如果加上了权重。那么它的优先级就是最高的。前提是它之后不再出现相同权重。如果权重相同，我们则需要去比较匹配规则的特殊性。<br>一个匹配规则一般由多个选择器组成，一条规则的特殊性由组成它的选择器的特殊性累加而成。选择器的特殊性可以分为四个等级。<br>​        第一个等级是行内样式为1000，第二等级是id选择器，为0100，第三等级是类选择器、类类选择器和属性选择器是0010，<br>​        第四个等级是元素选择器和伪元素选择器，为0001。规则中每出现一个选择器，就将它的特殊性进行叠加，这个叠加只限于对应的等级的叠加，不会产生进位。选择器特殊性值的比较是从左向右排序的，也就是说以1开头的特殊值要比以0开头的特殊值要大。<br>​        比如说特殊值为1000的规则优先级就比特殊值0999的规则高。如果两个规则的特殊性值相等的时候，那么就根据他们的引入顺序，后出现的规则的优先级高</p><h2 id="6-div居中的方法？"><a href="#6-div居中的方法？" class="headerlink" title="6.div居中的方法？"></a>6.div居中的方法？</h2><p>​        方法一：利用绝对定位，设置四个方向的值都为0，并将margin设置为auto,由于高度固定，因此对应方向实现水平，可以实现水平和垂直方向上的居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;   </span><br><span class="line">    <span class="attribute">background-color</span>: pink;    <span class="comment">/*方便看效果*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="C:\Users\Embrace\Desktop\CSS知识点\①居中1.JPG" style="zoom:50%;" /><p>方法二：利用绝对定位，设置top 50% left 50%定位到页面的中心 再通过margin负值来调整元素的中心到页面中心。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;<span class="comment">/*绝对定位*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">150px</span> -<span class="number">250px</span>;<span class="comment">/*外边距为自身宽高的一半*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: lightgreen;<span class="comment">/*方便看效果*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="C:\Users\Embrace\Desktop\CSS知识点\①居中2.JPG" style="zoom:50%;" /><p>方法三：设置 top 50% left 50% 定位到页面的中心，通过 transform:transalte(-50%,-50%) 。（未知容器的宽高，利用<code>transform</code>属性）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute; <span class="comment">/*相对定位或绝对定位均可*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue; <span class="comment">/*方便看效果*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="C:\Users\Embrace\Desktop\CSS知识点\①居中3.JPG" style="zoom:50%;" /><p>方法四：利用<code>flex</code>布局，通过 align-items:center 和 justify-conten:center 设置容器的垂直和水平方向为居中对齐，然后它的子元素也可以实现垂直和水平的居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*利用flex布局实际使用时应考虑兼容性*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;    <span class="comment">/*垂直居中*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;    <span class="comment">/*水平居中*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: bisque;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;    <span class="comment">/*方便看效果*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="C:\Users\Embrace\Desktop\CSS知识点\①居中4.JPG"></p><h2 id="7-display有哪些值？说明作用。"><a href="#7-display有哪些值？说明作用。" class="headerlink" title="7.display有哪些值？说明作用。"></a>7.display有哪些值？说明作用。</h2><p>​        block：块级元素，默认宽度为父元素宽度，可设置宽高，换行显示。<br>​        none：元素不显示，并从文档流中移除。<br>​        inline：行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。<br>​        inline-block：默认宽度为内容宽度，可以设置宽高，同行显示。<br>​        list-item：像块类型元素一样显示，并添加样式列表标记。<br>​        table：此元素作为块级表格来显示。<br>​        inherit：规定从父元素继承display的值。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数节流和防抖</title>
      <link href="/han-shu-jie-liu-he-fang-dou/"/>
      <url>/han-shu-jie-liu-he-fang-dou/</url>
      
        <content type="html"><![CDATA[<p>什么是函数节流？</p><p>1.一个函数执行一次后，只有<strong>大于</strong>设定的执行周期后才会执行第二次；2.有个需要频繁触发函数，出于优化新能角度，在规定时间内，只让函数触发的<strong>第一次</strong>生效，后面的不生效。</p><p>什么又是函数防抖？</p><p>一个需要频繁触发的函数在我规定的某个事件内，只让<strong>最后一次</strong>生效。</p><p>节流函数有两个参数，fun(fn, delay)，其中，fn表示要<strong>被节流</strong>的函数，delay表示规定的时间。</p><p>代码示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span> (nowTime - timer &gt; delay) &#123;</span><br><span class="line">            fn.call(<span class="built_in">this</span>);</span><br><span class="line">            timer = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function throttle(fn, delay) &#123;</span></span><br><span class="line"><span class="comment">//     // 记录当前函数触发的事件</span></span><br><span class="line"><span class="comment">//     var lastTime = 0;</span></span><br><span class="line"><span class="comment">//     return function () &#123;</span></span><br><span class="line"><span class="comment">//         // var nowTime=Date.now();</span></span><br><span class="line"><span class="comment">//         var nowTime = Date.now();</span></span><br><span class="line"><span class="comment">//         if (nowTime - lastTime &gt; delay) &#123;</span></span><br><span class="line"><span class="comment">//             // 修正this 指向问题</span></span><br><span class="line"><span class="comment">//             fn.call(this);</span></span><br><span class="line"><span class="comment">//             lastTime = nowTime;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">document</span>.onscroll = throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;触发了&#x27;</span> + <span class="built_in">Date</span>.now()), <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// function debounce(fn, delay) &#123;</span></span><br><span class="line"><span class="comment">//     var timer = null;</span></span><br><span class="line"><span class="comment">//     // 清除上一次的延迟武器</span></span><br><span class="line"><span class="comment">//     return function () &#123;</span></span><br><span class="line"><span class="comment">//         // 清除上一个延时器</span></span><br><span class="line"><span class="comment">//         clearTimeout(timer);</span></span><br><span class="line"><span class="comment">//         // 重新设置新的延时器</span></span><br><span class="line"><span class="comment">//         timer = setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             fn.apply(this);</span></span><br><span class="line"><span class="comment">//         &#125;, delay)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>).onclick = debounce(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;点击事件触发了&#x27;</span> + <span class="built_in">Date</span>.now()), <span class="number">500</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>body标签内仅有一个button元素。</p><p>结果如下：</p><p><img src="C:\Users\Embrace\Desktop\防抖节流示例.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数组去重</title>
      <link href="/shu-zu-qu-chong/"/>
      <url>/shu-zu-qu-chong/</url>
      
        <content type="html"><![CDATA[<p>本篇博客用来测试是否可以成功部署。</p><p>//现在多一条，重新部署却出了问题，再试试</p><h2 id="js数组去重"><a href="#js数组去重" class="headerlink" title="js数组去重"></a>js数组去重</h2><p>JavaScript数组去重有多种方法，这里简单列举三种。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">方法一：双重<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>],flag = [];</span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span> ;j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] == arr[i]) &#123;</span><br><span class="line">            arr.splice(j,<span class="number">1</span>);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flag.push(temp);</span><br><span class="line">&#125;</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">number , index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数字&quot;</span> + number + <span class="string">&quot;出现了&quot;</span> + flag[index] + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">            </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法二：利用indexOf()和push()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noRepeat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line"><span class="keyword">if</span>(newArr.indexOf(arr[i]) == -<span class="number">1</span>)&#123;</span><br><span class="line">newArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(noRepeat(arr));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方法三：sort()先排序，再两两比较，若相等则splice();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noRepeat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> a-b; &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i+<span class="number">1</span>] == arr[i])&#123;</span><br><span class="line">            arr.splice(i+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(noRepeat(arr));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
